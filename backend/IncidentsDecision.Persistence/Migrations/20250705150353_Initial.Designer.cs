// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IncidentsDecision.Persistence.Migrations
{
    [DbContext(typeof(IncidentDbContext))]
    [Migration("20250705150353_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HealthGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("HealthGroups");
                });

            modelBuilder.Entity("IncidentsDecision.Core.Models.Employee.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LoginId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LoginId")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("IncidentsDecision.Core.Models.EmployeeHealthGroup.EmployeeHealthGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("HealthGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("HealthGroupId")
                        .IsUnique();

                    b.ToTable("EmployeeHealthGroups");
                });

            modelBuilder.Entity("IncidentsDecision.Core.Models.EmployeeLogin.EmployeeLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeLogins");
                });

            modelBuilder.Entity("IncidentsDecision.Core.Models.EmployeePosition.EmployeePosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("PositionId")
                        .IsUnique();

                    b.ToTable("EmployeePositions");
                });

            modelBuilder.Entity("IncidentsDecision.Core.Models.NotResolvedIncident.NotResolvedIncident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NotResolvedIncidents");
                });

            modelBuilder.Entity("IncidentsDecision.Core.Models.Position.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("IncidentsDecision.Core.Models.ResolvedIncident.ResolvedIncident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ResolvedIncidents");
                });

            modelBuilder.Entity("IncidentsDecision.Core.Models.TechSupport.TechSupport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("LoginId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LoginId")
                        .IsUnique();

                    b.ToTable("TechSupports");
                });

            modelBuilder.Entity("TechSupportLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("SupportId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SupportId")
                        .IsUnique();

                    b.ToTable("TechSupportLogins");
                });

            modelBuilder.Entity("IncidentsDecision.Core.Models.Employee.Employee", b =>
                {
                    b.HasOne("IncidentsDecision.Core.Models.EmployeeLogin.EmployeeLogin", null)
                        .WithOne()
                        .HasForeignKey("IncidentsDecision.Core.Models.Employee.Employee", "LoginId");
                });

            modelBuilder.Entity("IncidentsDecision.Core.Models.EmployeeHealthGroup.EmployeeHealthGroup", b =>
                {
                    b.HasOne("IncidentsDecision.Core.Models.Employee.Employee", null)
                        .WithOne()
                        .HasForeignKey("IncidentsDecision.Core.Models.EmployeeHealthGroup.EmployeeHealthGroup", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthGroup", null)
                        .WithOne()
                        .HasForeignKey("IncidentsDecision.Core.Models.EmployeeHealthGroup.EmployeeHealthGroup", "HealthGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IncidentsDecision.Core.Models.EmployeeLogin.EmployeeLogin", b =>
                {
                    b.HasOne("IncidentsDecision.Core.Models.Employee.Employee", null)
                        .WithOne()
                        .HasForeignKey("IncidentsDecision.Core.Models.EmployeeLogin.EmployeeLogin", "EmployeeId");
                });

            modelBuilder.Entity("IncidentsDecision.Core.Models.EmployeePosition.EmployeePosition", b =>
                {
                    b.HasOne("IncidentsDecision.Core.Models.Employee.Employee", null)
                        .WithOne()
                        .HasForeignKey("IncidentsDecision.Core.Models.EmployeePosition.EmployeePosition", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IncidentsDecision.Core.Models.Position.Position", null)
                        .WithOne()
                        .HasForeignKey("IncidentsDecision.Core.Models.EmployeePosition.EmployeePosition", "PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IncidentsDecision.Core.Models.TechSupport.TechSupport", b =>
                {
                    b.HasOne("TechSupportLogin", null)
                        .WithOne()
                        .HasForeignKey("IncidentsDecision.Core.Models.TechSupport.TechSupport", "LoginId");
                });

            modelBuilder.Entity("TechSupportLogin", b =>
                {
                    b.HasOne("IncidentsDecision.Core.Models.TechSupport.TechSupport", null)
                        .WithOne()
                        .HasForeignKey("TechSupportLogin", "SupportId");
                });
#pragma warning restore 612, 618
        }
    }
}
